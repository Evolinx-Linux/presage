____________________________________________________
Getting started with Soothsayer in 5 minutes or less
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

1) Download, build and install soothsayer

Follow the instructions in the README file to install soothsayer on
your system.




2) Run the demo program and the simulator

Soothsayer is an extensible predictive text entry platform. It
provides a clean, simple application programming interface and a higly
configurable and extensible predictive framework in the form of a
library.

Soothsayer is not an end-user application. However, a number of demo
applications are included:
- soothsayerDemo: ncurses based demonstration program
- soothsayerDemoText: text based demonstration program
- soothsayerSimulator: simulates predictive process and reports on
  predictive performance


2.a) soothsayerDemo 

This demo displays the text entered so far in the top window that
stretches across the screen.  The current prediction is displayed
immediately underneath the text window, at the leftmost position.
Previous predictions are displayed in cronological order to the right
of the current prediction.  Subsequent predictions are displayed in
the lefmost position, and previous predictions are shifted to the
right, so that the current prediction is always on the left hand side.

Context switches are marked in some way (either a vertical bar or a
box enclosing the other prediction boxes). [not implemented yet]


2.b) soothsayerDemoText

This demo works similarly to soothsayerDemo, except that it is much
more barebones. It is useful when debugging.


2.c) soothsayerSimulator

This simulator evaluates the performance of the predictive engine on a
given text file.

The simulator requires a text file to be passed as argument. It reads
each character from the input file and sends it to the soothsayer
prediction engine. The simulator counts the number of key presses
required to enter the desired text using the soothsayer prediction
engine and the number of key presses required to enter the same text
with no prediction enabled.

At the end of the simulation, it generates a report on predictive
performance (expressed in terms of Keystrokes Savings Rate) and prints
it to standard out.




3) Tweak soothsayer to your needs


3.a) soothsayer.xml

Soothsayer is extensible and configurable. Soothsayer's extensibility
comes from a range of predictive mechanisms used to generate
predictions. You can decide what plugins to enable and what predictive
resources to tie those plugins to. All configuration variables can be
controlled by editing the XML configuration file (either
~/.soothsayer.xml or soothsayer.xml in the etc/ directory where
Soothsayer was installed - usually /etc -, whichever is found first).

Feel free to experiment with different settings: try enabling
different plugins, or changing individual plugins configuration
values. soothsayer.xml comes with comments describe what each
configuration variable is about.


3.b) text2ngram

If you wish to improve soothsayer's predictive performance, or you
want soothsayer to predict in your native language, you will need to
generate resources required by the predictive plugins. Currently, most
predictive plugins are statistical plugins which require an n-gram
database.

You can easily generate an n-gram database suitable for consumption by
soothsayer's plugin with the included text2ngram tool. Feed your
collection of text in your native language or domain-specific text to
text2ngram and generate customized predictive resources to improve the
quality and accuracy of the predictions.




4) Write a program that uses soothsayer

Below is a simple program that demonstrates how to use the C++
interface to soothsayer.

<code>
#include "soothsayer.h"
#include <iostream>

int main(int argc, char** argv)
{
    Soothsayer soothsayer;
    
    std::string buffer;
    std::vector< std::string > predictions;

    for (;;) {
	// prompt user and read line
	std::cout << "> ";
	getline(std::cin, buffer);

	// chomp newline
	if (buffer[buffer.size() - 1] == '\n') {
	    buffer.erase(buffer.end() - 1);
	}
	
	predictions = soothsayer.predict (buffer);

	// print predictions
	for (int i = 0; i < predictions.size(); i++) {
	    std::cout << i << ':' << predictions[i] << std::endl;
	}
    }

    return 0;
}
</code>

This program creates an instance of Soothsayer and prints the
predictions generated by soothsayer to screen after each text fragment
input by the user.

The instructions to watch for are on the first line in main() which
initializes soothsayer and on line 21 which tells soothsayer what text
the user entered and asks soothsayer to generate a prediction.

Soothsayer's API includes other methods, all accessible through the
Soothsayer class, defined in soothsayer.h.
