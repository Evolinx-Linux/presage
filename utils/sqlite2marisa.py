#!/usr/bin/env python3

# Create MARISA-based database for n-grams
#
# Requires: python3, numpy, sqlite and marisa python bindings

import argparse

import numpy as np
import marisa, sqlite3, os, sys

parser = argparse.ArgumentParser(description='''
This script generates N-gram database suitable for MARISA-based
Presage predictor. The database is stored in dedicated folder
and consists of MARISA Trie file with n-gram words and separate
file with n-gram counts.

The database is generated from n-gram SQLite database built by
text2ngram utility.
''')

parser.add_argument('sqlite_input', type=str,
                    help='n-gram database in SQLite format generated by text2ngram')

parser.add_argument('output', type=str,
                    help='Name of the new directory where n-gram database in MARISA format will be written. This directory will be created by the script')

parser.add_argument('--threshold', type=int, default=0,
                    help='Minimal n-gram counts propagated into the database. Default 0 (all recorded n-grams are propagated into MARISA-based database)')

args = parser.parse_args()

if os.path.exists(args.output):
    print('Cannot write MARISA database into existing directory %s' % args.output)
    print('Please provide path for directory that will be created by this script')
    sys.exit(-1)

os.makedirs(args.output)

factor = max(args.threshold,1)

# open the database

conn = sqlite3.connect(args.sqlite_input)
db = conn.cursor()

keyset = marisa.Keyset()
data = {}

ngram = 1
cont = True
while cont:
    tname = '_%d_gram' % ngram
    cont = False
    for r in db.execute("SELECT 1 FROM sqlite_master WHERE type='table' AND name=?", (tname,)):
        cont = True
        break
    if not cont:
        break

    print('Loading n-gram:', ngram)
    
    select = 'SELECT count,word'
    for i in range(ngram-1):
        select += ',word_%d' % (i+1)
    select += ' FROM ' + tname + ' WHERE count>?'

    for r in db.execute(select, (args.threshold,)):
        count = int(r[0]/factor)
        words = r[1:]        
        k = '%d' % ngram
        for w in reversed(words):
            k += ' ' + w
        data[k] = count
        keyset.push_back(k)

    ngram += 1
        
print('Data loaded, saving')

trie = marisa.Trie()
trie.build(keyset)
trie.save(os.path.join(args.output, "ngrams.trie"))

print("Keys: ", trie.num_keys())

arr = np.zeros(trie.num_keys()+1, dtype=np.int32)
s = db.execute("SELECT SUM(count) AS s FROM _1_gram WHERE count>?", (args.threshold,)).fetchone()[0]
print("Sum of 1-gram:", s)
if factor > 1:
    s = int(s/factor)
    print("Normalized sum of 1-gram:", s)
    
if s > 2**31:
    print("Trouble: sum of 1-grams doesn't fit INT32. Please normalize the data manually or automatically by increasing threshold for counts")
    sys.exit(-1)

arr[0] = s
    
agent = marisa.Agent()
for k in data:
    agent.set_query(k)
    trie.lookup(agent)
    arr[ agent.key_id() + 1 ] = data[k]

binwrite=open(os.path.join(args.output, 'ngrams.counts'),'wb')
arr.tofile(binwrite)
binwrite.close()

conn.close()
